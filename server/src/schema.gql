# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserRoleResponseDto {
  userType: String!
  userId: Mixed
}

"""Can be a string or an object"""
scalar Mixed

type UserAddressResponseDto {
  houseNumber: String!
  street: String!
  suburb: String!
  city: String!
  state: String!
  country: String!
  postalCode: String!
}

type UserContactResponseDto {
  email: String!
  phone: String!
}

type UserNameResponseDto {
  firstName: String!
  lastName: String!
}

type UserResponseDto {
  id: ID!
  name: UserNameResponseDto!
  dob: DateTime!
  account: String!
  password: String!
  role: UserRoleResponseDto!
  address: UserAddressResponseDto!
  contact: UserContactResponseDto!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type TeacherResponseDto {
  id: ID!
  name: UserNameResponseDto!
  userId: String
  courses: [ID!]
  studentClasses: [ID!]
}

type StudentResponseDto {
  id: ID!
  name: UserNameResponseDto!
  userId: String
  studentClass: String
}

type CourseSchemaResponseDto {
  dayOfWeek: String!
  startTime: String!
  endTime: String!
  startDate: DateTime!
  endDate: DateTime!
}

type CourseResponseDto {
  id: ID!
  name: String!
  description: String!
  classroom: String!
  courseSchedule: CourseSchemaResponseDto!
  instructor: ID
  studentClasses: [ID!]
}

type ClassResponseDto {
  id: ID!
  name: String!
  students: [ID!]
  courses: [ID!]
}

type Role {
  userType: String!
  userId: String!
}

type Name {
  firstName: String!
  lastName: String!
}

type LoginResponseDto {
  token: String!
  role: Role!
  name: Name!
}

type Query {
  findAllUsers(condition: FindUsersRequestDto): [UserResponseDto!]!
  findOneUsers(id: String!): UserResponseDto!
  findAllCourses: [CourseResponseDto!]!
  findOneCourse(id: String!): CourseResponseDto!
  findAllClasses: [ClassResponseDto!]!
  findOneClass(id: String!): ClassResponseDto!
}

input FindUsersRequestDto {
  Role: String
  Name: String
  Account: String
  deptClass: String
}

type Mutation {
  login(input: LoginRequestDto!): LoginResponseDto!
  createUser(createUserDto: UserRequestDto!): UserResponseDto!
  updateUser(id: String!, updateUserDto: UpdateUserDto!): UserResponseDto!
  deleteUser(id: String!): UserResponseDto!
  assignToTeacher(id: String!, assignToTeacherDto: AssignToTeacherDto!): TeacherResponseDto!
  assignToStudent(id: String!, assignToStudentDto: AssignToStudentDto!): StudentResponseDto!
  createCourse(createCourse: CourseRequestDto!): CourseResponseDto!
  updateCourse(id: String!, updateCourseDto: UpdateCourseDto!): CourseResponseDto!
  deleteCourse(id: String!): CourseResponseDto!
  createClass(createClassDto: ClassRequestDto!): ClassResponseDto!
  updateClass(id: String!, updateClassDto: UpdateClassDto!): ClassResponseDto!
  deleteClass(id: String!): ClassResponseDto!
}

input LoginRequestDto {
  account: String!
  password: String!
}

input UserRequestDto {
  name: UserNameRequestDto!
  dob: DateTime!
  account: String!
  password: String!
  role: UserRoleRequestDto!
  address: UserAddressRequestDto!
  contact: UserContactRequestDto!
}

input UserNameRequestDto {
  firstName: String!
  lastName: String!
}

input UserRoleRequestDto {
  userType: String!
}

input UserAddressRequestDto {
  houseNumber: String!
  street: String!
  suburb: String!
  city: String!
  state: String!
  country: String!
  postalCode: String!
}

input UserContactRequestDto {
  email: String!
  phone: String!
}

input UpdateUserDto {
  name: UserNameRequestDto
  dob: DateTime
  account: String
  password: String
  role: UserRoleRequestDto
  address: UserAddressRequestDto
  contact: UserContactRequestDto
}

input AssignToTeacherDto {
  courses: [ID!]
  studentClasses: [ID!]
}

input AssignToStudentDto {
  studentClass: String
}

input CourseRequestDto {
  name: String!
  description: String!
  classroom: String!
  courseSchedule: CourseSchemaRequestDto!
  instructor: String
  studentClasses: [ID!]
}

input CourseSchemaRequestDto {
  dayOfWeek: String!
  startTime: String!
  endTime: String!
  startDate: DateTime!
  endDate: DateTime!
}

input UpdateCourseDto {
  name: String
  description: String
  classroom: String
  courseSchedule: CourseSchemaRequestDto
  instructor: String
  studentClasses: [ID!]
}

input ClassRequestDto {
  name: String!
  students: [ID!]
  courses: [ID!]
}

input UpdateClassDto {
  name: String
  students: [ID!]
  courses: [ID!]
}